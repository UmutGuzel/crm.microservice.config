spring:
  datasource:
    url: "jdbc:postgresql://localhost:5432/payment-db"
    username: postgres
    password: test
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        formatsql: true
        use_sql_comments: true
    show-sql: true

  cloud:
    stream:
      defaultBinder: kafka
      kafka:
        binder:
          brokers: localhost:9092
          autoCreateTopics: true
          autoAddPartitions: true
          configuration:
            auto.create.topics.enable: true
            key.serializer: org.apache.kafka.common.serialization.StringSerializer
            value.serializer: org.springframework.kafka.support.serializer.JsonSerializer
            key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value.deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
            json.trusted.packages: "*"
      function:
        definition: paymentSuccessFunction;paymentFailedFunction;billCreatedFunction;billPaidFunction;billOverdueFunction
      bindings:
        paymentSuccessFunction-out-0:
          destination: payment-success-topic
          content-type: application/json
        paymentFailedFunction-out-0:
          destination: payment-failed-topic
          content-type: application/json
        billCreatedFunction-out-0:
          destination: bill-created-topic
          content-type: application/json
        billPaidFunction-out-0:
          destination: bill-paid-topic
          content-type: application/json
        billOverdueFunction-out-0:
          destination: bill-overdue-topic
          content-type: application/json

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: payment-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8888/eureka/
    register-with-eureka: true
    fetch-registry: true